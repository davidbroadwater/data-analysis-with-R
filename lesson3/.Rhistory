coord_cartesian(ylim = c(0, 250))
```
by(pf$friend_count, pf$gender, summary)
by(pf$friendships_initiated, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 250))
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 150))
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
by(pf$mobile_check_in, pf$gender, length())
lenths <- length(pf$mobile_check_in)
summary(pf$mobile_check_in/lengths)
lenths_1 <- length(pf$mobile_check_in/lengths)
lenths_1 <- length(pf$mobile_check_in)/lengths
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
lenths <- length(pf$mobile_check_in)
summary(pf$mobile_check_in/lengths)
lenths_1 <- length(pf$mobile_check_in)/lengths
summary(pf$mobile_check_in)
lenths <- length(pf$mobile_check_in)
summary(pf$mobile_check_in/lengths)
summary(pf$mobile_check_in)/lengths
summary(pf$mobile_check_in)
length(subset(pf$mobile_check_in, pf$mobile_check_in = 1)/lengths
length(subset(pf$mobile_check_in, pf$mobile_check_in == 1)/lengths
length(subset(pf$mobile_check_in, pf$mobile_check_in == 1))/lengths
```
length(subset(pf$mobile_check_in, pf$mobile_check_in == 0))/lengths
length(subset(pf$mobile_check_in, pf$mobile_check_in == 0))
lenths1 <- length(pf$mobile_check_in)
summary(pf$mobile_check_in)
length(subset(pf$mobile_check_in, pf$mobile_check_in == 0)) / length
length(subset(pf$mobile_check_in, pf$mobile_check_in == 0)) / lengths1
lengths1 <- length(pf$mobile_check_in)
summary(pf$mobile_check_in)
length(subset(pf$mobile_check_in, pf$mobile_check_in == 0)) / lengths1
length(subset(pf$mobile_check_in, pf$mobile_check_in == 1)) / lengths1
sum(pf$mobile_check_in == 1)/length(pf$mobile_check_in)
library(ggplot2) #must load the ggplot package first
data(diamonds) #loads the diamonds data set since it comes with the ggplot package
summary(diamonds)
?diamonds
qplot(x = dob_day, data = diamonds)
qplot(x = price, data = diamonds)
qplot(x = price, data = diamonds, binwidth = 500) +
scale_x_continuous(limits = c(0, 15000), breaks = seq(0, 15000, 1000))
length(subset(diamonds$price, diamonds$price < 500))
length(subset(diamonds$price, diamonds$price < 250))
length(subset(diamonds$price, diamonds$price > 15000))
length(subset(diamonds$price, diamonds$price >= 15000))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0, 5000, 500))
qplot(x = price, data = diamonds, binwidth = 100) +
facet_wrap(~cut)
table(diamonds$price)
by(diamonds$price, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, summary, digits = max(getOption('digits'))
by(diamonds$price, diamonds$cut, summary, digits = max(getOption('digits')))
```
by(diamonds$price, diamonds$cut, summary, digits = max(getOption('digits')))
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds) + facet_wrap(~cut, scales="free_y")
qplot(x = cut, y = price,
data = diamonds,
geom = 'boxplot')
qplot(x = cut, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7000))
qplot(x = clarity, y = price,
data = diamonds,
geom = 'boxplot')
qplot(x = clarity, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7000))
?diamonds
qplot(x = clarity, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7000))
qplot(x = clarity, y = carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7000))
qplot(x = clarity, y = carat,
data = diamonds,
geom = 'boxplot')
qplot(x = clarity, y = carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 1.75))
qplot(x = color, y = price,
data = diamonds,
geom = 'boxplot')
qplot(x = color, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7000))
qplot(x = color, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7500))
qplot(x = color, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 8000))
qplot(x = cut, y = price/carat,
data = diamonds,
geom = 'boxplot')
qplot(x = clarity, y = price/carat,
data = diamonds,
geom = 'boxplot')
qplot(x = clarity, y = price/carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7000))
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot')
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 8000))
qplot(x = cut, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 7000))
IQR(subset(diamonds, color == 'D')$price)
by(diamonds$price, diamonds$color, summary, digits = max(getOption('digits')))
?diamonds
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 8000))
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot')
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 6000))
qplot(x = carat,
data = diamonds,
xlab = "Friend Count",
ylab = "Proportion of users with that friend count",
binwidth = 0.1, geom = 'freqpoly')
qplot(x = carat,
data = diamonds,
xlab = "Friend Count",
ylab = "Proportion of users with that friend count",
binwidth = 0.01, geom = 'freqpoly')
qplot(x = carat,
data = diamonds,
xlab = "Friend Count",
ylab = "Proportion of users with that friend count",
binwidth = 0.01, geom = 'freqpoly') +
scale_x_continuous(lim = c(0, 5), breaks = seq(0, 5, 0.5)) +
scale_y_continuous(lim = c(0, 2500), breaks = seq(0, 2500, 500))
qplot(x = carat,
data = diamonds,
xlab = "Friend Count",
ylab = "Proportion of users with that friend count",
binwidth = 0.01, geom = 'freqpoly') +
scale_x_continuous(lim = c(0, 5), breaks = seq(0, 5, 0.5))
qplot(x = carat,
data = diamonds,
xlab = "Friend Count",
ylab = "Proportion of users with that friend count",
binwidth = 0.01, geom = 'freqpoly')
qplot(x = carat,
data = diamonds,
xlab = "Friend Count",
ylab = "Proportion of users with that friend count",
binwidth = 0.01, geom = 'freqpoly') +
scale_x_continuous(lim = c(0, 5), breaks = seq(0, 5, 0.5))
qplot(x = carat,
data = diamonds,
xlab = "Friend Count",
ylab = "Proportion of users with that friend count",
binwidth = 0.01, geom = 'freqpoly') +
scale_x_continuous(lim = c(0, 5), breaks = seq(0, 5, 0.1))
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = 1, check.names = F)
summary(cell_data)
cell_data_t <- t(cell_data)
summary(cell_data_t)
summary(cell_data_t$United States)
summary(cell_data_t$'United States')
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = 1, check.names = F)
summary(cell_data)
cell_data_t <- t(cell_data)
summary(cell_data_t$United_States)
summary(cell_data_t)
summary(cell_data_t$)
summary(cell_data_t)
summary(cell_data$2011)
summary(cell_data$'2011')
summary(cell_data_t$'United_States')
us_data <- subset(cell_data, Country == 'United_States')
View(cell_data)
us_data <- subset(cell_data, row.names == 'United_States')
us_data <- subset(cell_data, row.names = 'United_States')
summary(us_data)
us_data <- subset(cell_data_t, row.names = 'United_States')
View(cell_data_t)
View(us_data)
View(cell_data)
us_data <- subset(cell_data, row.names = 'United_States')
View(us_data)
us_data <- subset(cell_data, cell_data$'United_States')
us_data <- cell_data$'United_States'
cell_data$'United_States'
cell_data$'2011'
cell_data_t$'United_States'
View(cell_data_t)
View(cell_data_t)
library(tidyr)
install.packages('tidyr', dependencies = TRUE)
library(tidyr)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = 1, check.names = F)
cell_data <- gather(cell_data, 'year', 'cell_phones', 2:ncol(cell_data))
View(cell_data)
View(cell_data)
View(cell_data)
View(cell_data)
cell_data_t <- gather(cell_data_t, 'year', 'cell_phones', 2:ncol(cell_data_t))
cell_data_t <- t(cell_data)
View(cell_data_t)
View(cell_data_t)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = 1, check.names = F)
cell_data_t <- t(cell_data)
View(cell_data)
View(cell_data)
summary(cell_data$'United_States')
summary(cell_data$'2001')
?t()
summary(cell_data_t$'United_States')
View(cell_data_t)
View(cell_data_t)
summary(cell_data_t[,'United_States'])
us_data = cell_da
us_data = cell_data_t[, 'United_States']
us_data = subset(cell_data_t, !is.na(United_States)
)
us_data = subset(cell_data_t, !is.na(cell_data_t[, 'United_States']))
View(us_data)
View(us_data)
us_data = cell_data_t[, 'United_States']
View(diamonds)
View(us_data)
us_data = subset(us_data, !is.na(us_data))
View(us_data)
qplot(x = '2011', data = cell_data)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = 1, check.names = F, row.names = NULL)
?names()
names(cell_data)
names(cell_data_t)
names(cell_data)[1] <- 'Country'
View(cell_data)
View(cell_data)
?read.csv
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = NULL , check.names = F)
View(cell_data)
View(cell_data)
names(cell_data)[1] <- 'Country'
View(cell_data)
View(cell_data)
cell_data_t <- t(cell_data)
View(cell_data_t)
View(cell_data_t)
us_data <- subset(cell_data, Country == 'United_States')
View(us_data)
View(us_data)
us_data <- na.omit(us_data)
View(us_data)
View(us_data)
us_data <- subset(cell_data_t, Country == 'United_States')
View(cell_data_t)
View(cell_data_t)
View(cell_data)
View(cell_data)
row.names(cell_data_t)
View(cell_data_t)
View(cell_data_t)
col.names(cell_data_t)
View(cell_data)
View(cell_data)
cell_data <- ma.omit(us_data)
cell_data <- na.omit(us_data)
View(cell_data)
View(cell_data)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = NULL , check.names = F)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = NULL , check.names = T)
View(cell_data)
View(cell_data)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = NULL , check.names = F)
View(cell_data)
View(cell_data)
?t()
View(cell_data_t)
View(cell_data_t)
cell_data_t[, Country]
cell_data_t[, 'Country']
cell_data_t[, 1]
cell_data_t[1, ]
View(cell_data)
View(cell_data_t)
cell_data_t[0, ]
cell_data_t[1, ]
row.names(cell_data_t) <- cell_data_t[1, ]
row.names(cell_data_t) <- c(cell_data_t[1, ])
row.names(cell_data_t) <- c('Year', cell_data_t[1, ])
View(cell_data_t)
View(cell_data_t)
?row.names
length(cell_data_t)
names(cell_data_t)
names(cell_data_t) <- c(cell_data_t[1, ])
View(cell_data_t)
View(cell_data_t)
names(cell_data_t)
summary(cell_data_t)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = NULL , check.names = F)
cell_data_t <- gather(cell_data_t, 'year', 'cell_phones', 2:ncol(cell_data_t))
cell_data_t <- t(cell_data)
summary(cell_data_t)
View(cell_data_t)
View(cell_data_t)
View(cell_data)
View(cell_data)
View(diamonds)
View(us_data)
View(cell_data)
cell_data <- read.csv('cell_phone_per_100.csv', header = T, row.names = NULL , check.names = F)
cell_data_t <- t(cell_data)
View(cell_data_t)
View(cell_data)
str(cell_data)
str(cell_data_t)
cell_data_t <- as.data.frame(t(cell_data[,-1]))
View(cell_data_t)
View(cell_data_t)
View(cell_data)
View(cell_data)
n <- cell_data$Country
colnames(cell_data_t) <- n
cell_data_t$myfactor <- factor(row.names(cell_data_t))
View(cell_data_t)
View(cell_data_t)
qplot(x = '2011', data = cell_data)
qplot(x = '2011', data = cell_data_t)
View(cell_data)
View(cell_data)
str(cell_data_t) # Check the column types
cell_data_t <- gather(cell_data_t, 'year', 'cell_phones', 2:ncol(cell_data_t))
View(cell_data_t)
View(cell_data_t)
cell_data_t <- as.data.frame(t(cell_data[,-1]))
colnames(cell_data_t) <- n
cell_data_t$myfactor <- factor(row.names(cell_data_t))
cell_data_t1 <- gather(cell_data_t, 'year', 'cell_phones', 1:ncol(cell_data_t))
View(cell_data_t1)
View(cell_data_t1)
View(cell_data_t)
View(cell_data_t)
cell_data_t1 <- gather(cell_data_t, 'row.names', 'cell_phones', 2:ncol(cell_data_t))
View(cell_data_t1)
View(cell_data_t1)
cell_data_t1 <- gather(cell_data_t, 'row.names', 'cell_phones', 1:ncol(cell_data_t))
View(cell_data_t1)
View(cell_data_t1)
cell_data_t1 <- gather(cell_data_t, 'Country', 'cell_phones', 2:ncol(cell_data_t))
View(cell_data_t1)
View(cell_data_t1)
View(cell_data_t)
View(cell_data_t1)
summary(cell_data_t$'United_States')
View(cell_data)
View(cell_data)
qplot(x = '2011', data = cell_data)
qplot(x = cell_data$'2011', data = cell_data)
qplot(x = cell_data$'2010', data = cell_data)
qplot(x = cell_data$'2019', data = cell_data)
qplot(x = cell_data$'2009', data = cell_data)
qplot(x = cell_data$'2011', data = cell_data)
View(cell_data)
View(cell_data)
View(diamonds)
View(diamonds)
View(cell_data_t)
View(cell_data_t1)
View(cell_data)
View(cell_data_t)
View(cell_data)
qplot(x = cell_data$'2011', data = cell_data, geom = 'boxplot')
qplot(x = cell_data$'2011', y = cell_data$'2011', data = cell_data, geom = 'boxplot')
View(cell_data)
View(cell_data)
qplot(x = cell_data$'2011', y = cell_data$'2010', data = cell_data, geom = 'boxplot')
qplot(x = cell_data$'2011', y = cell_data, data = cell_data, geom = 'boxplot')
qplot(x = cell_data, y = cell_data$'2011', data = cell_data, geom = 'boxplot')
View(cell_data)
View(cell_data)
cell_data_t <- gather(cell_data_t, 'Country', 'cell_phones', 2:ncol(cell_data_t))
birthdays <- read.csv('birthdays.csv', header = T, row.names = NULL , check.names = F)
View(birthdays)
View(birthdays)
birthdays$date <- as.Date(dates,
format = "%m/%d/%y")
birthdays$date <- as.Date(birthdays$date,
format = "%m/%d/%y")
```
birthdays$date <- as.Date(date,
format = "%m/%d/%y")
birthdays <- birthdays %>%
separate(date, c("Month", "Day", "Year"), sep = '/') %>%
select(-Year)
library(lubridate)
install.packages('lubridate', dependencies = TRUE)
library(lubridate)
birthdays <- read.csv('birthdays.csv', header = T, row.names = NULL , check.names = F)
birthdays$date <- as.Date(birthdays$date,
format = "%m/%d/%y")
View(birthdays)
View(birthdays)
birthdays$birthday <- as.Date(birthdays$birthday,
format = "%m/%d/%y")
View(birthdays)
View(birthdays)
birthdays <- birthdays %>%
separate(date, c("Month", "Day", "Year"), sep = '/') %>%
select(-Year)
qplot(x=birthday,
data=birthdays,
xlab="Date",
ylab="Count of birthdays",
binwidth=1)
qplot(x=birthday,
data=birthdays,
xlab="Date",
ylab="Count of birthdays",
binwidth=30)
```
?mdy
?%>%
?separate
library(dplyr)
birthday_dates <- birthdays %>%
separate(birthday, c("Month", "Day", "Year"), sep = '/') %>%
select(-Year)
birthday_dates <- birthdays %>%
separate(birthdays$birthday, c("Month", "Day", "Year"), sep = '/') %>%
select(-Year)
birthday_dates <- birthdays %>%
separate(birthdays$birthday, c("Month", "Day", "Year"), sep = '-') %>%
select(-Year)
birthday_dates <- birthdays %>%
separate(birthday, c("Month", "Day", "Year"), sep = '-') %>%
select(-Year)
View(birthday_dates)
View(birthday_dates)
birthday_dates <- birthdays %>%
separate(birthday, c("Year", "Month", "Day"), sep = '-') %>%
select(-Year)
View(birthday_dates)
View(birthday_dates)
count(birthday_dates,month)
count(birthday_dates,Month)
qplot(x=month,
data=birthday_dates,
xlab="Date",
ylab="Count of birthdays",
binwidth=1)
View(birthday_dates)
qplot(x=Month,
data=birthday_dates,
xlab="Date",
ylab="Count of birthdays",
binwidth=1)
qplot(x=Day,
data=birthday_dates,
xlab="Day of Month",
ylab="Count of birthdays",
binwidth=1)
qplot(x=birthday,
data=birthdays,
xlab="Date",
ylab="Count of birthdays",
binwidth=1)
a=count(birthdays, birthday)
a[order(a$n,a$birthday,decreasing=T),]
View(a)
View(a)
View(birthdays)
View(birthdays)
